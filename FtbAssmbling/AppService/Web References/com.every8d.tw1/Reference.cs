//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.18444
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 原始程式碼已由 Microsoft.VSDesigner 自動產生，版本 4.0.30319.18444。
// 
#pragma warning disable 1591

namespace ftd.com.every8d.tw1 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MessageSoap", Namespace="http://tempuri.org/")]
    public partial class Message : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback QueueInOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadBookingOperationCompleted;
        
        private System.Threading.SendOrPostCallback EraseBookingOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Message() {
            this.Url = global::ftd.Properties.Settings.Default.AppService_com_every8d_tw1_Message;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event QueueInCompletedEventHandler QueueInCompleted;
        
        /// <remarks/>
        public event LoadBookingCompletedEventHandler LoadBookingCompleted;
        
        /// <remarks/>
        public event EraseBookingCompletedEventHandler EraseBookingCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/QueueIn", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueueIn(string custID, string CompanyNo, string userNo, string sendtype, string msgCategory, string subject, string content, string image, string Audio, string xml, string batchID, string certified) {
            object[] results = this.Invoke("QueueIn", new object[] {
                        custID,
                        CompanyNo,
                        userNo,
                        sendtype,
                        msgCategory,
                        subject,
                        content,
                        image,
                        Audio,
                        xml,
                        batchID,
                        certified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueueInAsync(string custID, string CompanyNo, string userNo, string sendtype, string msgCategory, string subject, string content, string image, string Audio, string xml, string batchID, string certified) {
            this.QueueInAsync(custID, CompanyNo, userNo, sendtype, msgCategory, subject, content, image, Audio, xml, batchID, certified, null);
        }
        
        /// <remarks/>
        public void QueueInAsync(string custID, string CompanyNo, string userNo, string sendtype, string msgCategory, string subject, string content, string image, string Audio, string xml, string batchID, string certified, object userState) {
            if ((this.QueueInOperationCompleted == null)) {
                this.QueueInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueueInOperationCompleted);
            }
            this.InvokeAsync("QueueIn", new object[] {
                        custID,
                        CompanyNo,
                        userNo,
                        sendtype,
                        msgCategory,
                        subject,
                        content,
                        image,
                        Audio,
                        xml,
                        batchID,
                        certified}, this.QueueInOperationCompleted, userState);
        }
        
        private void OnQueueInOperationCompleted(object arg) {
            if ((this.QueueInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueueInCompleted(this, new QueueInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadBooking", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoadBooking(string custID, string userNo, string batchID) {
            object[] results = this.Invoke("LoadBooking", new object[] {
                        custID,
                        userNo,
                        batchID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoadBookingAsync(string custID, string userNo, string batchID) {
            this.LoadBookingAsync(custID, userNo, batchID, null);
        }
        
        /// <remarks/>
        public void LoadBookingAsync(string custID, string userNo, string batchID, object userState) {
            if ((this.LoadBookingOperationCompleted == null)) {
                this.LoadBookingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadBookingOperationCompleted);
            }
            this.InvokeAsync("LoadBooking", new object[] {
                        custID,
                        userNo,
                        batchID}, this.LoadBookingOperationCompleted, userState);
        }
        
        private void OnLoadBookingOperationCompleted(object arg) {
            if ((this.LoadBookingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadBookingCompleted(this, new LoadBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EraseBooking", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EraseBooking(string custID, string userID, string batchID, string sendTime, string mobile) {
            object[] results = this.Invoke("EraseBooking", new object[] {
                        custID,
                        userID,
                        batchID,
                        sendTime,
                        mobile});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EraseBookingAsync(string custID, string userID, string batchID, string sendTime, string mobile) {
            this.EraseBookingAsync(custID, userID, batchID, sendTime, mobile, null);
        }
        
        /// <remarks/>
        public void EraseBookingAsync(string custID, string userID, string batchID, string sendTime, string mobile, object userState) {
            if ((this.EraseBookingOperationCompleted == null)) {
                this.EraseBookingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEraseBookingOperationCompleted);
            }
            this.InvokeAsync("EraseBooking", new object[] {
                        custID,
                        userID,
                        batchID,
                        sendTime,
                        mobile}, this.EraseBookingOperationCompleted, userState);
        }
        
        private void OnEraseBookingOperationCompleted(object arg) {
            if ((this.EraseBookingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EraseBookingCompleted(this, new EraseBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void QueueInCompletedEventHandler(object sender, QueueInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueueInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueueInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void LoadBookingCompletedEventHandler(object sender, LoadBookingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadBookingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadBookingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void EraseBookingCompletedEventHandler(object sender, EraseBookingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EraseBookingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EraseBookingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591