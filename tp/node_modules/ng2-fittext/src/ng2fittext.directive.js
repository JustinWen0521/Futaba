"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Ng2FittextDirective = (function () {
    function Ng2FittextDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.minFontSize = 7;
        this.maxFontSize = 1000;
        this.fontSize = 0;
        this.speed = 1.05;
    }
    Ng2FittextDirective.prototype.setFontSize = function (fontSize) {
        if (fontSize < this.minFontSize) {
            // force that font size will never be lower than minimal allowed font size
            fontSize = this.minFontSize;
        }
        this.fontSize = fontSize;
        return this.el.nativeElement.style.setProperty('font-size', (fontSize).toString() + 'px');
    };
    Ng2FittextDirective.prototype.calculateFontSize = function (fontSize, speed) {
        // TODO Do with Gauss
        return Math.floor(fontSize / speed);
    };
    Ng2FittextDirective.prototype.checkOverflow = function (parent, children) {
        var overflowX = children.scrollWidth - parent.clientWidth;
        var overflowY = children.clientHeight - parent.clientHeight;
        return (overflowX > 1 || overflowY > 1);
    };
    Ng2FittextDirective.prototype.onResize = function () {
        if (this.activateOnResize && this.fittext) {
            if (this.activateOnInputEvents && this.fittext) {
                this.setFontSize(this.container ? this.container.clientHeight : this.el.nativeElement.parentElement.clientHeight);
            }
            else {
                this.setFontSize(this.container ? this.container.clientWidth : this.el.nativeElement.parentElement.clientWidth);
            }
            this.ngAfterViewInit();
        }
    };
    Ng2FittextDirective.prototype.onInputEvents = function () {
        if (this.activateOnInputEvents && this.fittext) {
            this.setFontSize(this.container ? this.container.clientHeight : this.el.nativeElement.parentElement.clientHeight);
            this.ngAfterViewInit();
        }
    };
    Ng2FittextDirective.prototype.ngOnInit = function () {
        if (this.useMaxFontSize) {
            this.maxFontSize = parseInt(window.getComputedStyle(this.container ? this.container : this.el.nativeElement.parentElement).fontSize, null);
        }
        if (this.fittext) {
            this.setFontSize(this.maxFontSize);
        }
        this.el.nativeElement.style.setProperty('will-change', 'content');
    };
    Ng2FittextDirective.prototype.ngAfterViewInit = function () {
        if (this.fittext) {
            var overflow = this.container ? this.checkOverflow(this.container, this.el.nativeElement)
                : this.checkOverflow(this.el.nativeElement.parentElement, this.el.nativeElement);
            if (overflow) {
                if (this.fontSize > this.minFontSize) {
                    // iterate only until font size is bigger than minimal value
                    this.setFontSize(this.calculateFontSize(this.fontSize, this.speed));
                    this.ngAfterViewInit();
                }
            }
            else {
                if (this.useMaxFontSize) {
                    if (this.fontSize > this.maxFontSize) {
                        this.maxFontSize = parseInt(window.getComputedStyle(this.container ? this.container : this.el.nativeElement.parentElement).fontSize, null);
                        this.setFontSize(this.maxFontSize);
                    }
                }
            }
        }
    };
    Ng2FittextDirective.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (changes.modelToWatch) {
            // change of model to watch - call ngAfterViewInit where is implemented logic to change size
            setTimeout(function (_) { return _this.ngAfterViewInit(); });
        }
    };
    Ng2FittextDirective.prototype.ngAfterViewChecked = function () {
        if (this.fontSize > this.minFontSize) {
            this.setFontSize(this.container ? this.container.clientHeight : this.el.nativeElement.parentElement.clientHeight);
            this.ngAfterViewInit();
        }
    };
    return Ng2FittextDirective;
}());
__decorate([
    core_1.Input('fittext'),
    __metadata("design:type", Object)
], Ng2FittextDirective.prototype, "fittext", void 0);
__decorate([
    core_1.Input('activateOnResize'),
    __metadata("design:type", Boolean)
], Ng2FittextDirective.prototype, "activateOnResize", void 0);
__decorate([
    core_1.Input('container'),
    __metadata("design:type", Object)
], Ng2FittextDirective.prototype, "container", void 0);
__decorate([
    core_1.Input('activateOnInputEvents'),
    __metadata("design:type", Boolean)
], Ng2FittextDirective.prototype, "activateOnInputEvents", void 0);
__decorate([
    core_1.Input('useMaxFontSize'),
    __metadata("design:type", Boolean)
], Ng2FittextDirective.prototype, "useMaxFontSize", void 0);
__decorate([
    core_1.Input('minFontSize'),
    __metadata("design:type", Object)
], Ng2FittextDirective.prototype, "minFontSize", void 0);
__decorate([
    core_1.Input('modelToWatch'),
    __metadata("design:type", Object)
], Ng2FittextDirective.prototype, "modelToWatch", void 0);
__decorate([
    core_1.HostListener('window:resize', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], Ng2FittextDirective.prototype, "onResize", null);
__decorate([
    core_1.HostListener('input', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], Ng2FittextDirective.prototype, "onInputEvents", null);
Ng2FittextDirective = __decorate([
    core_1.Directive({
        selector: '[fittext]'
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, core_1.Renderer])
], Ng2FittextDirective);
exports.Ng2FittextDirective = Ng2FittextDirective;
//# sourceMappingURL=ng2fittext.directive.js.map